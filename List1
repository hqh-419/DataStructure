题目描述
给出一个链表和一个值x，以x为参照将链表划分成两部分，使所有小于x的节点都位于大于或等于x的节点之前。
两个部分之内的节点之间要保持的原始相对顺序。
例如：
给出1->4->3->2->5->2和x = 3,
返回1->2->2->4->3->5.

Given a linked list and a value x, partition it such that all nodes less than x come before nodes greater than or equal to x.
You should preserve the original relative order of the nodes in each of the two partitions.

For example,
Given1->4->3->2->5->2and x = 3,
return1->2->2->4->3->5.


代码

import java.util.*;

/*
 * public class ListNode {
 *   int val;
 *   ListNode next = null;
 * }
 */

public class Solution {
    /**
     * 
     * @param head ListNode类 
     * @param x int整型 
     * @return ListNode类
     */
    public ListNode partition (ListNode head, int x) {
        // write code here
        if(head==null||head.next==null){
            return head;
        }
        ListNode pre = new ListNode(0);
        ListNode pre1 = new ListNode(0);
        pre.next = pre1.next = head;
        ListNode cur = head;
        ListNode p=pre;
        ListNode p1=pre1;
        while(cur!=null){
            if(cur.val<x){
                p.next=cur;
                p=p.next;
            }else{
                p1.next=cur;
                p1=p1.next;
            }
            
            cur=cur.next;
        }
        p1.next=null;
        p.next=pre1.next;
        return pre.next;
        
        
    }
